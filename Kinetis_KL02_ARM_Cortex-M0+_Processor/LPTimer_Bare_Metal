#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MKL02Z4.h"
#include "fsl_debug_console.h"
/* TODO: insert other include files here. */

/* TODO: insert other definitions and declarations here. */

typedef struct {
	uint32_t tcsr;
	uint32_t prescale;
	uint32_t compare;
	uint32_t count;
}LPTMR_Regs_t;

#define LPTMR_REG ((LPTMR_Regs_t *)0x40040000)

typedef struct {
	uint32_t PCR[32];
}PORTRegs_t;

#define PORT_B ((PORTRegs_t *)0x4004A000)

typedef struct {
	uint32_t PDOR;
	uint32_t PSOR;
	uint32_t PCOR;
	uint32_t PTOR;
	uint32_t PDIR;
	uint32_t PDDR;
}GPIORegs_t;

#define GPIO_B ((GPIORegs_t *)0x400FF040)

typedef struct {
	uint32_t iser[1];
	uint32_t rsvd[31];
	uint32_t icer[1];
	uint32_t rsvd1[31];
	uint32_t ispr[1];
	uint32_t rsvd2[31];
	uint32_t icpr[1];
	uint32_t rsvd3[31];
	uint32_t rsvd4[64];
	uint32_t ipr[8];
}NVIC_Regs_t;

#define NVIC_REG ((NVIC_Regs_t *)0xE000E100)


void LPTMR0_IRQHandler(void)
{
	GPIO_B->PTOR = (1 << 6);

	LPTMR_REG->tcsr = LPTMR_REG->tcsr | (1 << 7);
}

/*
 * @brief   Application entry point.
 */
int main(void) {
	/* Enable the Clock for LPTIMER & PORTB*/
	SIM->SCGC5 = (1 << 10) | (1 << 0);

	/* PORTB Pin 18 as GPIO */
	PORT_B->PCR[6] = (1 << 8);

	/* GPIOB Pin 18 as Output */
	GPIO_B->PDDR = (1 << 6);

	/* LPTMR Clock Source is LPO & Bypass is disabled & prescaler divider is 4*/
	LPTMR_REG->prescale = (1 << 3) | 0x01;

	/* LPO is 1KHz ( 1mSec ). We need 1sec, compare register - 1000 */
	LPTMR_REG->compare = 1000;

	/* Enable, Timer Mode, Reset on compare, Interrupt Enable */
	LPTMR_REG->tcsr = (1 << 0) | (1 << 6);

	//NVIC_EnableIRQ(LPTMR0_IRQn);
	NVIC_REG->iser[0] = (1 << 28);


	while(1) {

	}
    return 0 ;
}
